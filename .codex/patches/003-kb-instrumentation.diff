diff --git a/src/components/BluelineChatpilot.jsx b/src/components/BluelineChatpilot.jsx
index ec18c49..db075a7 100644
--- a/src/components/BluelineChatpilot.jsx
+++ b/src/components/BluelineChatpilot.jsx
@@ -519,6 +519,7 @@ function BluelineChatpilotInner() {
   const listRef = useRef(null);
   const inputRef = useRef(null);
   const copiedTimer = useRef(null);
+  const [kbErrorMessage, setKbErrorMessage] = useState("");
 
   // Init hero + rotaties
   useEffect(() => {
@@ -558,21 +559,38 @@ function BluelineChatpilotInner() {
     if (inputRef.current) autoresizeTextarea(inputRef.current);
     setIsTyping(true);
 
+    setKbErrorMessage("");
     let kbItems = [];
     const kbOrgId = activeOrgId || '54ec8e89-d265-474d-98fc-d2ba579ac83f';
 
     if (kbOrgId && supabase) {
+      if (process.env.NODE_ENV !== 'production') {
+        console.log("KB search start", {
+          activeOrgId,
+          orgId: kbOrgId,
+          q: trimmed.slice(0, 40),
+          k: 3,
+        });
+      }
+
       try {
         const { items } = await searchKb({ supabase, orgId: kbOrgId, query: trimmed, limit: 3 });
-        if (Array.isArray(items) && items.length) {
-          kbItems = items.slice(0, 3).map((it) => ({
-            id: it?.id ?? null,
-            title: it?.title ?? "",
-            snippet: it?.snippet ?? it?.body ?? "",
-          }));
+        const normalized = Array.isArray(items) ? items.slice(0, 3) : [];
+        kbItems = normalized.map((it) => ({
+          id: it?.id ?? null,
+          title: it?.title ?? "",
+          snippet: it?.snippet ?? it?.body ?? "",
+        }));
+
+        if (process.env.NODE_ENV !== 'production') {
+          console.log("KB search done", {
+            kbLength: kbItems.length,
+            firstTitle: kbItems[0]?.title ?? null,
+          });
         }
-      } catch {
+      } catch (error) {
         kbItems = [];
+        setKbErrorMessage("KB kon niet worden opgehaald (mogelijk geen toegang of RLS). Antwoord zonder KB gegeven.");
       }
     }
 
@@ -881,6 +899,12 @@ function BluelineChatpilotInner() {
               </div>
             </form>
 
+            {kbErrorMessage && (
+              <p className="mx-auto max-w-[760px] px-4 md:px-5 text-xs text-gray-500 mt-1">
+                {kbErrorMessage}
+              </p>
+            )}
+
             {/* Disclaimer */}
             <div className="text-center text-[12px] text-[#66676b] pb-3">Chatpilot kan fouten maken. Controleer belangrijke informatie.</div>
           </div>
diff --git a/src/services/kb.js b/src/services/kb.js
index 341bc63..4bb7ed5 100644
--- a/src/services/kb.js
+++ b/src/services/kb.js
@@ -1,24 +1,42 @@
 export async function searchKb({ supabase, orgId, query, limit }) {
-  const { data, error } = await supabase.rpc('kb_search_chunks', {
-    p_org: orgId,
-    q: query,
-    k: limit ?? 3,
-  });
+  const k = limit ?? 3;
 
-  const items = Array.isArray(data)
-    ? data.map((row, index) => ({
-        id: row?.id ?? row?.chunk_id ?? row?.document_id ?? null,
-        title: row?.title ?? row?.chunk_title ?? row?.document_title ?? '',
-        snippet: row?.snippet ?? row?.chunk_snippet ?? row?.content ?? '',
-        rank: typeof row?.rank === 'number' ? row.rank : (index + 1) * 0.05, // fallback klein positief
-      }))
-    : [];
+  try {
+    const { data: rows } = await supabase
+      .rpc("kb_search_chunks", {
+        p_org: orgId,
+        q: query,
+        k,
+      })
+      .throwOnError();
 
-  // Relevantie-drempel (pas later gerust aan, bv. 0.05–0.20)
-  const THRESHOLD = 0.10;
-  const filtered = items
-    .filter((i) => (i.rank ?? 0) >= THRESHOLD)
-    .slice(0, limit ?? 3);
+    if (process.env.NODE_ENV !== 'production') {
+      const count = Array.isArray(rows) ? rows.length : 0;
+      console.log("KB search result", { orgId, q: query, k, count });
+    }
 
-  return { items: filtered, error };
+    const items = Array.isArray(rows)
+      ? rows.map((row, index) => ({
+          id: row?.id ?? row?.chunk_id ?? row?.document_id ?? null,
+          title: row?.title ?? row?.chunk_title ?? row?.document_title ?? '',
+          snippet: row?.snippet ?? row?.chunk_snippet ?? row?.content ?? '',
+          rank: typeof row?.rank === 'number' ? row.rank : (index + 1) * 0.05, // fallback klein positief
+        }))
+      : [];
+
+    // Relevantie-drempel (pas later gerust aan, bv. 0.05–0.20)
+    const THRESHOLD = 0.1;
+    const filtered = items
+      .filter((i) => (i.rank ?? 0) >= THRESHOLD)
+      .slice(0, k);
+
+    return { items: filtered };
+  } catch (error) {
+    const err = error instanceof Error ? error : new Error(String(error));
+    const wrapped = new Error(`KB_SEARCH_ERROR: ${err.message}`);
+    if (process.env.NODE_ENV !== 'production') {
+      console.error(wrapped);
+    }
+    throw wrapped;
+  }
 }
